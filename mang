#!/bin/bash
# place this file under /usr/bin , and chmod +x this file in order to be able to call it 
# You can call it from every folder , without extension . Just run "mang command"
# For info pages (more advanced than man) you can install and use the tkinfo package (available in repos)
# Tip: Using whatis command (i.e whatis cat) gives you a single line description. You can apply this to whole dir like whatis /usr/bin/*
# Either tkinfo and man have options to looks inside directories or to display directory of man / info page been displayed.
function printhelp {
echo "  mang - man with GUI "
echo "  Place this file under /usr/bin , and chmod +x this file in order to be able to call it from anywhere. " 
echo "  Use --install to install at /usr/bin automatically"
echo "  You can call it from every folder , without extension . Just run mang command "
echo "  This prog does not work with info pages. For GUI at info pages you can install and use the tkinfo package (available in repos) "
}
#echo $0
#mkfifo ${fifo=$(mktemp -u)}
#exec {fd}<>${fifo}
#info cat >>$fifo
#yad --text-info <$fifo
#exit

if [[ -z $1 ]];then
	echo "You need to provide a command to show manual or --help for options"
else
	if [ "$1" = "--help" ];then 
		printhelp
	elif [ "$1" = "--install" ];then
		cp -v -i $0 /usr/bin
		sleep 1
		chmod +x /usr/bin/mang
	else
		tit=$(echo ${1^^}) #Capitalize all letters
		manual=$(man $1 2>&1) #2>&1 is necessary since if no man available the error goes to stderr (&2) and manual will get no value since nothing is printed in stdout (&1)
		if [[ "$manual" == "No manual"* ]]
		then 
			echo "$manual" && exit
		else
			if [ -e /usr/bin/yad ];then
				man $1 |yad --text-info --height=500 --width=800 --center --title="$tit Manual " --wrap --show-uri --no-markup &	
			elif [ -e /usr/bin/zenity ];then
				echo "yad is missing , using zenity"
				man $1 |zenity --text-info --height=500 --width=800 --title="$tit Manual " &
			else
				echo "yad and zenity missing - starting classic bash man..."
				sleep 1
				man $1
			fi
		fi
	fi
fi

exit

# To be Done
# Search previous - next. Yad provides basic search with control + s which finds only the first occurence of the pattern
# Recall mang with a different file
# Provide a list of all the commands under /usr/bin , using also whatis to get single line description, select file and then man this file
# Optimize operation for info pages. Ideally be a GUI info browswer.
# About info : If you info a command with a lot of chapters all of the are send to yad.
# If you info part ot a package (i.e info cat , which is part of coreutils) only the cat pages will be send to yad but if you info coreutils you get everything (and here is where i miss the advanced search)
# Alternative script : Make a script "yadit" that will be called like "yadit whatever command" and automatically create a GUI for the command given (man,cat,ls,find,etc)
